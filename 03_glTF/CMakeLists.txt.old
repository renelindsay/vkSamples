# Sets the minimum version of CMake required to build the native
# library. You should either keep the default value or only pass a
# value of 3.4.0 or lower.
cmake_minimum_required(VERSION 3.4.1)

project(glTF VERSION 0.2)


#============================ PROFILER ===========================
option(ENABLE_PROFILER "Generate gmon.out for gprof" OFF)
if (ENABLE_PROFILER)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pg")
    SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -pg")
endif()
#=================================================================
#============================= HEADERS ===========================
include_directories( cpp                      )
include_directories( cpp/Window               )
include_directories( cpp/vkUtils              )
include_directories( cpp/vkUtils/thirdparty   )
include_directories( cpp/vkUtils/VulkanWrapper)

aux_source_directory( cpp                       SRC_LIST)
aux_source_directory( cpp/Window                SRC_LIST)
aux_source_directory( cpp/vkUtils               SRC_LIST)
aux_source_directory( cpp/vkUtils/thirdparty    SRC_LIST)
aux_source_directory( cpp/vkUtils/VulkanWrapper SRC_LIST)
#=================================================================
#============================MULTI-TOUCH==========================
option(ENABLE_MULTITOUCH "Multi-touch screen support.(Requires package: libxi-dev)" ON)
if (ENABLE_MULTITOUCH)
    add_definitions(-DENABLE_MULTITOUCH)
endif()
#=================================================================
#==============================LINUX==============================
if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake")  #for find_package
    #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -pthread")
    set(BUILD_WSI_XCB_SUPPORT ON)  #Other options are not yet supported.

    if (BUILD_WSI_XCB_SUPPORT)
        add_definitions(-DVK_USE_PLATFORM_XCB_KHR)
        #---XCB---  (window)
        find_package(XCB REQUIRED)
        include_directories(${XCB_INCLUDE_DIR})  # /usr/include
        link_libraries(${XCB_LIBRARIES})         # /usr/lib/x86_64-linux-gnu/libxcb.so
        #---XCB_IMAGE--- (Alternative to Swapchain)
        option(ENABLE_XCB_IMAGE "XCB-Image support.(Requires package:  libxcb-image0-dev)" ON)
        if (ENABLE_XCB_IMAGE)
            add_definitions(-DENABLE_XCB_IMAGE)
            link_libraries(libxcb-image.so)
        endif()
        #---XKB--- (keyboard)
        find_library(XKB "xkbcommon" DOC "XKB Keyboard library") # xkb keyboard support
        link_libraries(${XKB})                   # /usr/lib/x86_64-linux-gnu/libxkbcommon.so
        #---X11---
        find_package(X11 REQUIRED)
        include_directories(${X11_INCLUDE_DIR})
        link_libraries(${X11_LIBRARIES})
        #---X11-XCB---
        find_package(X11_XCB REQUIRED)
        include_directories(${X11_XCB_INCLUDE_DIR})
        link_libraries(${X11_XCB_LIBRARIES})
        #---XInput--- (MultiTouch)
        if (ENABLE_MULTITOUCH)               #adds 8.5KB to exe size
            link_libraries (${X11_Xinput_LIB})
            add_definitions(-DENABLE_MULTITOUCH)
        endif()
    endif()
    link_libraries (${CMAKE_DL_LIBS}) # for dlsym

    set (VULKAN_LOADER_NAME "vulkan")
    add_executable(${PROJECT_NAME} ${SRC_LIST})

    #Build static libstdc++
    option(STATIC_LINK_LIBSTDCPP "Required for NVidia Nsight" OFF)
    if (STATIC_LINK_LIBSTDCPP)
        set(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
        set(CMAKE_EXE_LINKER_FLAGS "-static-libgcc -static-libstdc++")
    endif()

endif()
#=================================================================
#=============================WINDOWS=============================
if(WIN32)
    #set(_WIN32_WINNT 0x0A00)
    #set(WINVER 0x0A00)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++17")
    add_definitions(-DVK_USE_PLATFORM_WIN32_KHR)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    set (VULKAN_LOADER_NAME "vulkan-${MAJOR}")
    add_executable(${PROJECT_NAME} ${SRC_LIST})
endif()
#=================================================================
#=============================ANDROID=============================
if(ANDROID)
    message("Platform = ${ANDROID_PLATFORM}")
    add_definitions(-DVK_USE_PLATFORM_ANDROID_KHR)
    add_definitions(-DUSE_VULKAN_WRAPPER)
    add_definitions(-D__VULKAN__)
    add_definitions(-DVULKAN)

    # Set path to header files.
    include_directories( ${ANDROID_NDK}/sources/android/native_app_glue)
    include_directories( cpp/Window/android)

    # Set path to source files.
    aux_source_directory( ${ANDROID_NDK}/sources/android/native_app_glue SRC_LIST)
    aux_source_directory( cpp/Window/android SRC_LIST)

    # Create native shared library
    add_library(native SHARED ${SRC_LIST})

    # Link to external libraries
    target_link_libraries(native log android)
endif()
#=================================================================
