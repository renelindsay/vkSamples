#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
//#include "utils.glsl"


struct Camera {
    mat4  view;
    mat4  proj;
    mat4  viewInverse;
    mat4  projInverse;
    uint  flags;
    int   sky;
    uint  random;
};

struct RayPayload {
    //int hit;
    
    float distance;
    //vec3 hitpos;
    //vec3 normal;
    //vec3 diffuse;
    //vec4 albedo;
    //vec3 illum;
    //vec3 orm;
    
    vec3 color;
};


// input from Vulkan
layout(binding = 0, set = 0) uniform accelerationStructureEXT tlas;
layout(binding = 1, set = 0, rgba8) uniform image2D image;  // render target
layout(binding = 2, set = 0) uniform Cameras  { Camera camera; };
//layout(binding = 7, set = 0) uniform Lights   { Light light;   };

// ray payload from other shaders
layout(location = 0) rayPayloadEXT RayPayload payload;  // camera ray



vec4 PrimaryRay(vec3 origin, vec3 direction) {
    // CAMERA RAY
    float tmin = camera.proj[3][2] / (camera.proj[2][2]-1.0);  // nearplane
    float tmax = camera.proj[3][2] / (camera.proj[2][2]+1.0);  // farplane
    
    uint rayFlags = gl_RayFlagsOpaqueEXT;
    uint cullMask = 0xff;
    uint sbtOffset = 0;
    uint sbtStride = 0;
    uint missIndex = 0;
    traceRayEXT(tlas, rayFlags, cullMask, 
                sbtOffset, sbtStride, missIndex, 
                origin, tmin, direction, tmax, 0);

    //float dist = payload.distance/2.0-1.0;
    
    vec4 color = vec4(payload.color, 1.0);
    return color;
}

//--------------------------------------------------------------------
void main_old() {  // no FSAA
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin    = camera.viewInverse * vec4(0,0,0,1);
    vec4 target    = camera.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = camera.viewInverse * vec4(normalize(target.xyz), 0);

    vec4 color = PrimaryRay(origin.xyz, direction.xyz);
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), color);
}
//--------------------------------------------------------------------
void main() {  // FSAA
    int AA = 2;  // FSAA 2x2
    int AA1=AA+1;
    vec2 step = vec2(1.0/AA1);
    vec4 origin = camera.viewInverse[3];
    vec4 color = vec4(0);
    for(int y = 1; y<AA1; y++) {
        for(int x = 1; x<AA1; x++) {
            vec2 sub=step * vec2(x,y);
            const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + sub;
            const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
            vec2 d = inUV * 2.0 - 1.0;
            vec4 target    = camera.projInverse * vec4(d.x, d.y, 1, 1);
            vec4 direction = camera.viewInverse * vec4(normalize(target.xyz), 0);
            //rand(direction.x + direction.y + direction.z);  //randomize
            color += PrimaryRay(origin.xyz, direction.xyz);
       }
    }
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), color/(AA*AA));
}
//--------------------------------------------------------------------