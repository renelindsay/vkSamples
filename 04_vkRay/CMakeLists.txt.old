cmake_minimum_required(VERSION 3.18.1)

project(vkRay VERSION 0.1)


#============================ PROFILER ===========================
option(ENABLE_PROFILER "Generate gmon.out for gprof" OFF)
if (ENABLE_PROFILER)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pg")
    SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -pg")
endif()
#=================================================================
#============================= HEADERS ===========================
include_directories(cpp)
include_directories(../libs/Window)
include_directories(../libs/vkUtils)
include_directories(../libs/vkUtils/vkRay)
include_directories(../libs/vkUtils/thirdparty)
include_directories(../libs/vkUtils/VulkanWrapper)

aux_source_directory(cpp SRC_LIST)
#=================================================================
#==============================LINUX==============================
if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    add_definitions(-DVK_USE_PLATFORM_XCB_KHR)
 #   link_libraries (${CMAKE_DL_LIBS}) # for dlsym
 #   set (VULKAN_LOADER_NAME "vulkan")
    add_executable(${PROJECT_NAME} ${SRC_LIST})
    target_link_libraries(${PROJECT_NAME} Window)
    target_link_libraries(${PROJECT_NAME} vkUtils)

    #Build static libstdc++
    option(STATIC_LINK_LIBSTDCPP "Required for NVidia Nsight" OFF)
    if (STATIC_LINK_LIBSTDCPP)
        set(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
        set(CMAKE_EXE_LINKER_FLAGS "-static-libgcc -static-libstdc++")
    endif()

endif()
#=================================================================
#=============================WINDOWS=============================
if(WIN32)
    #set(_WIN32_WINNT 0x0A00)
    #set(WINVER 0x0A00)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++17")
    add_definitions(-DVK_USE_PLATFORM_WIN32_KHR)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
#    set (VULKAN_LOADER_NAME "vulkan-${MAJOR}")
    add_executable(${PROJECT_NAME} ${SRC_LIST})
    target_link_libraries(${PROJECT_NAME} Window)
    target_link_libraries(${PROJECT_NAME} vkUtils)
endif()
#=================================================================
#=============================ANDROID=============================
if(ANDROID)
    message("Platform = ${ANDROID_PLATFORM}")
    add_definitions(-DVK_USE_PLATFORM_ANDROID_KHR)
    #add_definitions(-DUSE_VULKAN_WRAPPER)
    #add_definitions(-D__VULKAN__)
    #add_definitions(-DVULKAN)

    # Set path to header files.
#    include_directories( ${ANDROID_NDK}/sources/android/native_app_glue)
#    include_directories( cpp/Window/android)

    # Set path to source files.
#    aux_source_directory( ${ANDROID_NDK}/sources/android/native_app_glue SRC_LIST)
#    aux_source_directory( cpp/Window/android SRC_LIST)

    # Create native shared library
    add_library(native SHARED ${SRC_LIST})

    # Link to external libraries
    target_link_libraries(native log android)
    target_link_libraries(${PROJECT_NAME} Window)
    target_link_libraries(${PROJECT_NAME} vkUtils)
endif()
#=================================================================


